{"pageProps":{"project":{"title":"LocalPin","description":"A location-first social media app that connects local communities","slug":"localpin","content":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"LocalPin is a location-first social media app that connects local communities through what they all have in common—places. Users can create pins on a map to inform, warn, or entertain other members of the community. Users can see all the pins around their current location and pins will appear in real time, connecting users in the spur of the moment.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LocalPin pins can inform community members for a lost item, warn community members of hazards, or simply inform users of current events in the community. Users can also place blog posts on the map, informing and entertaining members of the community. Users can also comment on other posts and vote to resolve them.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Integrating the Google Maps API into such a unique software stack was a challenge and required a lot of Typescript “glue” code. This was my first experience with Typescript, which would become one of my favorite languages. Overall, I used this app as an opportunity to see the entire app development lifecycle from beginning to end.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This app was submitted to the 2021-22 Congressional App Challenge. Watch the video \", _jsx(_components.a, {\n        href: \"https://www.youtube.com/watch?v=s3fCew-yv_M\",\n        children: \"here\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Technical Details\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The app is built using web technologies with ASP.NET Core Blazor, a WebAssembly-based SPA framework that allows C# code to run in the browser. Real-time communication uses SignalR, as it's integrated well into Blazor and much simpler than raw WebSockets. JS/TypeScript interop allows the C# components to communicate with the Google Maps JavaScript API.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The backend is built with ASP.NET Core backed by a PostgreSQL database for persistent storage. Using C# allowed me to use the same models for both frontend and backend, and serialization and deserialization was seamless. User actions are simple HTTP POST endpoints while real-time notifications are transferred with a persistent SignalR (WebSocket) connection. Authentication is handled with the \", _jsx(_components.code, {\n        children: \"Samuellihn.UserManagement\"\n      }), \" library reused from a previous project.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"thumbnail":"/projects/localpin/media/logo.png","images":["/projects/localpin/media/create-pin.png","/projects/localpin/media/map.png","/projects/localpin/media/post-preview.png","/projects/localpin/media/post.png","/projects/localpin/media/block-diagram.png"]}},"__N_SSG":true}